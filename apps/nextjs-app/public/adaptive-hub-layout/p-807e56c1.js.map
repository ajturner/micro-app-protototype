{"version":3,"sources":["../../node_modules/.pnpm/@esri+calcite-components@1.2.0/node_modules/@esri/calcite-components/dist/collection/utils/observers.js"],"names":["createObserver","type","callback","options","Observer","getObserver","ExtendedMutationObserver","window","MutationObserver","[object Object]","super","this","observedEntry","target","push","observe","newObservedEntries","filter","observed","takeRecords","disconnect","forEach","IntersectionObserver","ResizeObserver"],"mappings":";;;;;AAaO,SAASA,EAAeC,EAAMC,EAAUC,GAI7C,MAAMC,EAAWC,EAAYJ,GAC7B,OAAO,IAAIG,EAASF,EAAUC,GAEhC,SAASE,EAAYJ,GAEnB,MAAMK,UAAiCC,OAAOC,iBAC5CC,YAAYP,GACVQ,MAAMR,GACNS,KAAKC,cAAgB,GACrBD,KAAKT,SAAWA,EAElBO,QAAQI,EAAQV,GACdQ,KAAKC,cAAcE,KAAK,CAAED,OAAAA,EAAQV,QAAAA,IAClC,OAAOO,MAAMK,QAAQF,EAAQV,GAE/BM,UAAUI,GACR,MAAMG,EAAqBL,KAAKC,cAAcK,QAAQC,GAAaA,EAASL,SAAWA,IACvFF,KAAKC,cAAgB,GACrBD,KAAKT,SAASQ,MAAMS,cAAeR,MACnCA,KAAKS,aACLJ,EAAmBK,SAASH,GAAaP,KAAKI,QAAQG,EAASL,OAAQK,EAASf,YAGpF,OAAO,WACL,OAAQF,IAAS,eACbM,OAAOe,qBACPrB,IAAS,WACPK,EACAC,OAAOgB,eALR","sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { Build } from \"@stencil/core\";\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver(type, callback, options) {\n  if (!Build.isBrowser) {\n    return undefined;\n  }\n  const Observer = getObserver(type);\n  return new Observer(callback, options);\n}\nfunction getObserver(type) {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver {\n    constructor(callback) {\n      super(callback);\n      this.observedEntry = [];\n      this.callback = callback;\n    }\n    observe(target, options) {\n      this.observedEntry.push({ target, options });\n      return super.observe(target, options);\n    }\n    unobserve(target) {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n  return (function () {\n    return (type === \"intersection\"\n      ? window.IntersectionObserver\n      : type === \"mutation\"\n        ? ExtendedMutationObserver\n        : window.ResizeObserver);\n  })();\n}\n"]}