{"version":3,"sources":["../../node_modules/.pnpm/@esri+calcite-components@1.2.0/node_modules/@esri/calcite-components/dist/collection/components/date-picker/utils.js"],"names":["translationCache","requestCache","async","getLocaleData","lang","locale","getSupportedLocale","fetch","getAssetPath","then","resp","json","catch","console","error","data","getValueAsDateRange","value","map","v","index","dateFromISO"],"mappings":";;;;;GAcO,MAAMA,EAAmB,GAOzB,MAAMC,EAAe,GAOrBC,eAAeC,EAAcC,GAClC,MAAMC,EAASC,EAAmBF,GAClC,GAAIJ,EAAiBK,GAAS,CAC5B,OAAOL,EAAiBK,GAE1B,IAAKJ,EAAaI,GAAS,CACzBJ,EAAaI,GAAUE,MAAMC,EAAa,4BAA4BH,WACnEI,MAAMC,GAASA,EAAKC,SACpBC,OAAM,KACPC,QAAQC,MAAM,qBAAqBT,oDACnC,OAAOF,EAAc,SAGzB,MAAMY,QAAad,EAAaI,GAChCL,EAAiBK,GAAUU,EAC3B,OAAOA,EAOF,SAASC,EAAoBC,GAClC,OAAOA,EAAMC,KAAI,CAACC,EAAGC,IAAUC,EAAYF,EAAGC,IAAU","sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { getAssetPath } from \"@stencil/core\";\nimport { dateFromISO } from \"../../utils/date\";\nimport { getSupportedLocale } from \"../../utils/locale\";\n/**\n * CLDR cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const translationCache = {};\n/**\n * CLDR request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache = {};\n/**\n * Fetch calendar data for a given locale from list of supported languages\n *\n * @param lang\n * @public\n */\nexport async function getLocaleData(lang) {\n  const locale = getSupportedLocale(lang);\n  if (translationCache[locale]) {\n    return translationCache[locale];\n  }\n  if (!requestCache[locale]) {\n    requestCache[locale] = fetch(getAssetPath(`./assets/date-picker/nls/${locale}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n      console.error(`Translations for \"${locale}\" not found or invalid, falling back to english`);\n      return getLocaleData(\"en\");\n    });\n  }\n  const data = await requestCache[locale];\n  translationCache[locale] = data;\n  return data;\n}\n/**\n *  Maps value to valueAsDate\n *\n * @param value\n */\nexport function getValueAsDateRange(value) {\n  return value.map((v, index) => dateFromISO(v, index === 1));\n}\n"]}