{"version":3,"sources":["../../node_modules/.pnpm/@esri+calcite-components@1.2.0/node_modules/@esri/calcite-components/dist/collection/utils/number.js","../../node_modules/.pnpm/@esri+calcite-components@1.2.0/node_modules/@esri/calcite-components/dist/collection/utils/locale.js"],"names":["unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","[object Object]","input","integers","decimals","expandExponentialNumberString","split","concat","this","value","BigInt","padEnd","DECIMALS","slice","ROUNDED","isNegative","charAt","s","toString","replace","padStart","getIntegersAndDecimals","length","formatter","parts","numberFormatter","formatToParts","unshift","type","minusSign","push","decimal","forEach","char","integersFormatted","format","decimalsFormatted","map","Number","join","n","fromBigInt","_divRound","SHIFT","repeat","dividend","divisor","bigint","Object","assign","create","prototype","isValidNumber","numberString","isNaN","parseNumberString","stringContainsNumbers","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","numberKeys","includes","reduce","string","part","allLeadingZerosOptionallyNegative","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","sanitizeNumberString","sanitizedValue","test","func","firstE","toLowerCase","indexOf","substring","section","exponentialParts","number","isSafeInteger","magnitude","decimalParts","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","shiftedDecimal","shiftDecimalRight","rightPaddedZeros","expandedNumberString","some","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","updateEffectiveLocale","size","mutationObserver","observe","document","documentElement","attributes","attributeFilter","subtree","add","effectiveLocale","getLocale","disconnectLocalized","delete","disconnect","createObserver","records","record","el","target","inUnrelatedSubtree","containsCrossShadowBoundary","closestLangEl","closestElementCrossShadowBoundary","closestLang","lang","hasAttribute","NumberStringFormat","delocalize","_numberFormatOptions","trim","_minusSign","_group","_decimal","_digits","_getDigitIndex","localize","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","numberStringFormatter"],"mappings":"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AAW,IAAIwC,OAAOyC,EAAYjF,EAASkB,UAAYlB,EACjH,MAAMwF,EAAiB,GAAGE,EAAiBjF,MAAM,EAAGwE,KAAa,MAAMS,EAAiBjF,MAAMwE,KAC9F,OAAOO,GAET,MAAMG,EAAuBV,EAAY,EACrC,GAAGlF,IAAW0F,EAAkBzF,EAAUiF,KAC1C,GAAGE,EAAiBpF,EAAUkF,KAAajF,IAC/C,MAAO,GAAGW,EAAa,IAAM,KAAKgF,EAAqB/E,OAAO,KAAO,IAAM,IAAM,KAAK+E,EACnF5E,QAAQtB,EAAoB,IAC5BsB,QAAQkD,EAAmC,MAEhD,SAASb,EAAsBW,GAC7B,OAAOH,EAAWgC,MAAMb,GAAWhB,EAAOF,SAASkB;;;;;GCnK9C,MAAMc,EAAgB,KACtB,MAAMC,EAAa,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACAD,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,SAEK,MAAME,EAAU,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACAF,EACA,QACA,QACA,QACA,KACA,QACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,SAEK,MAAMG,EAAmB,CAC9B,OACA,UACA,OACA,OACA,OACA,WACA,OACA,OACA,UACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,UACA,OACA,OACA,QAGF,MAAMC,EAA8BC,GAAoBF,EAAiBnC,SAASqC,GAClF,MAAMC,GAAyB,IAAIC,KAAKC,cAAeC,kBAAkBJ,gBAC7D,MAACK,EAAyBJ,IAA2B,SAAWF,EAA2BE,GACnG,OACAA,EACQ,MAACK,EAA+BN,GAAoBD,EAA2BC,GAAmBA,EAAk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","sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { numberKeys } from \"./key\";\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  constructor(input) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n        BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n  getIntegersAndDecimals() {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n  toString() {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n  formatToParts(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char) => parts.push({ type: \"fraction\", value: char }));\n    }\n    return parts;\n  }\n  format(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n        .split(\"\")\n        .map((char) => formatter.numberFormatter.format(Number(char)))\n        .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n  add(n) {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n  subtract(n) {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n  multiply(n) {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n  divide(n) {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = (bigint) => Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\nexport function isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\nexport function parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n      return numberKeys.includes(value);\n    })\n      .reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nexport const sanitizeNumberString = (numberString) => sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n  const sanitizedValue = nonExpoNumString\n    .replace(allHyphensExceptTheStart, \"\")\n    .replace(decimalOnlyAtEndOfString, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue)\n    ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n      ? sanitizedValue\n      : new BigDecimal(sanitizedValue).toString()\n    : nonExpoNumString;\n});\nexport function sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n  if (!firstE) {\n    return func(numberString);\n  }\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString) {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n  const shiftDecimalLeft = (integers, magnitude) => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n  const shiftDecimalRight = (decimals, magnitude) => {\n    const rightPaddedZeros = magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n  const expandedNumberString = magnitude > 0\n    ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n    : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\nfunction stringContainsNumbers(string) {\n  return numberKeys.some((number) => string.includes(number));\n}\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\nexport const defaultLocale = \"en\";\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nexport const numberingSystems = [\n  \"arab\",\n  \"arabext\",\n  \"bali\",\n  \"beng\",\n  \"deva\",\n  \"fullwide\",\n  \"gujr\",\n  \"guru\",\n  \"hanidec\",\n  \"khmr\",\n  \"knda\",\n  \"laoo\",\n  \"latn\",\n  \"limb\",\n  \"mlym\",\n  \"mong\",\n  \"mymr\",\n  \"orya\",\n  \"tamldec\",\n  \"telu\",\n  \"thai\",\n  \"tibt\"\n];\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])];\nconst isNumberingSystemSupported = (numberingSystem) => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nexport const defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n  ? \"latn\"\n  : browserNumberingSystem;\nexport const getSupportedNumberingSystem = (numberingSystem) => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale, context = \"cldr\") {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n  if (!locale) {\n    return defaultLocale;\n  }\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n  locale = locale.toLowerCase();\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n  return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component) {\n  updateEffectiveLocale(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component) {\n  connectedComponents.delete(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target;\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n      if (inUnrelatedSubtree) {\n        return;\n      }\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n  return (component.el.lang ||\n    closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale);\n}\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  constructor() {\n    this.delocalize = (numberString) => \n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => nonExpoNumString\n        .trim()\n        .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n        .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n        .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n        .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex))\n      : numberString;\n    this.localize = (numberString) => this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => isValidNumber(nonExpoNumString.trim())\n        ? new BigDecimal(nonExpoNumString.trim())\n          .format(this)\n          .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n        : nonExpoNumString)\n      : numberString;\n  }\n  get group() {\n    return this._group;\n  }\n  get decimal() {\n    return this._decimal;\n  }\n  get minusSign() {\n    return this._minusSign;\n  }\n  get digits() {\n    return this._digits;\n  }\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n    if (\n    // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    (!this._numberFormatOptions &&\n      options.locale === defaultLocale &&\n      options.numberingSystem === defaultNumberingSystem &&\n      // don't skip initialization if any options besides locale/numberingSystem are set\n      Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem\n      }).format(9876543210)\n    ].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group characters that don't render correctly\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d) => index.get(d);\n  }\n}\nexport const numberStringFormatter = new NumberStringFormat();\n"]}