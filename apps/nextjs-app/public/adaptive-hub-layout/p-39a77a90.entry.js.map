{"version":3,"sources":["../../node_modules/.pnpm/@esri+calcite-components@1.2.0/node_modules/@esri/calcite-components/dist/collection/components/action-group/action-group.css?tag=calcite-action-group&encapsulation=shadow","../../node_modules/.pnpm/@esri+calcite-components@1.2.0/node_modules/@esri/calcite-components/dist/collection/components/action-group/action-group.js"],"names":["actionGroupCss","ActionGroup","[object Object]","hostRef","this","setMenuOpen","event","menuOpen","target","open","expanded","layout","columns","undefined","scale","messages","messageOverrides","effectiveLocale","defaultMessages","updateMessages","componentLoaded","el","focus","connectLocalized","connectMessages","connectConditionalSlotComponent","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","setUpLoadableComponent","setUpMessages","setComponentLoaded","hasTooltip","getSlotted","SLOTS","menuTooltip","h","name","slot","ACTION_MENU_SLOTS","tooltip","hasMenuItems","menuActions","flipPlacements","label","more","onCalciteActionMenuOpen","placement","icon","ICONS","menu","trigger","text","textEnabled","renderTooltip","Fragment","renderMenu","delegatesFocus","assetsDirs"],"mappings":"mcAAA,MAAMA,EAAiB,0pECkBVC,EAAW,MACtBC,YAAAC,aAMEC,KAAKC,YAAeC,IAClBF,KAAKG,WAAaD,EAAME,OAAOC,MAEjCL,KAAKM,SAAW,MAChBN,KAAKO,OAAS,WACdP,KAAKQ,QAAUC,UACfT,KAAKG,SAAW,MAChBH,KAAKU,MAAQD,UACbT,KAAKW,SAAWF,UAChBT,KAAKY,iBAAmBH,UACxBT,KAAKa,gBAAkB,GACvBb,KAAKc,gBAAkBL,UAEzBX,kBACEE,KAAKG,SAAW,MAElBL,oBAGAA,wBACEiB,EAAef,KAAMA,KAAKa,iBAQ5Bf,uBACQkB,EAAgBhB,MACtBA,KAAKiB,GAAGC,QAOVpB,oBACEqB,EAAiBnB,MACjBoB,EAAgBpB,MAChBqB,EAAgCrB,MAElCF,uBACEwB,EAAoBtB,MACpBuB,EAAmBvB,MACnBwB,EAAmCxB,MAErCF,0BACE2B,EAAuBzB,YACjB0B,EAAc1B,MAEtBF,mBACE6B,EAAmB3B,MAOrBF,gBACE,MAAMmB,GAAEA,GAAOjB,KACf,MAAM4B,EAAaC,EAAWZ,EAAIa,EAAMC,aACxC,OAAOH,EAAaI,EAAE,OAAQ,CAAEC,KAAMH,EAAMC,YAAaG,KAAMC,EAAkBC,UAAa,KAEhGtC,aACE,MAAMmB,GAAEA,EAAEX,SAAEA,EAAQH,SAAEA,EAAQO,MAAEA,EAAKH,OAAEA,EAAMI,SAAEA,GAAaX,KAC5D,MAAMqC,EAAeR,EAAWZ,EAAIa,EAAMQ,aAC1C,OAAOD,EAAgBL,EAAE,sBAAuB,CAAE1B,SAAUA,EAAUiC,eAAgB,CAAC,OAAQ,SAAUC,MAAO7B,EAAS8B,KAAMC,wBAAyB1C,KAAKC,YAAaI,KAAMF,EAAUwC,UAAWpC,IAAW,aAAe,eAAiB,gBAAiBG,MAAOA,GAASsB,EAAE,iBAAkB,CAAEY,KAAMC,EAAMC,KAAMpC,MAAOA,EAAOwB,KAAMC,EAAkBY,QAASC,KAAMrC,EAAS8B,KAAMQ,YAAa3C,IAAa0B,EAAE,OAAQ,CAAEC,KAAMH,EAAMQ,cAAgBtC,KAAKkD,iBAAoB,KAE1dpD,SACE,OAAQkC,EAAEmB,EAAU,KAAMnB,EAAE,OAAQ,MAAOhC,KAAKoD,cAIlDC,4BAA8B,OAAO,KAWrCC,wBAA0B,MAAO,CAAC","sourcesContent":["/* mixins & extensions */\n@keyframes in {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes in-down {\n  0% {\n    opacity: 0;\n    transform: translate3D(0, -5px, 0);\n  }\n  100% {\n    opacity: 1;\n    transform: translate3D(0, 0, 0);\n  }\n}\n@keyframes in-up {\n  0% {\n    opacity: 0;\n    transform: translate3D(0, 5px, 0);\n  }\n  100% {\n    opacity: 1;\n    transform: translate3D(0, 0, 0);\n  }\n}\n@keyframes in-scale {\n  0% {\n    opacity: 0;\n    transform: scale3D(0.95, 0.95, 1);\n  }\n  100% {\n    opacity: 1;\n    transform: scale3D(1, 1, 1);\n  }\n}\n:root {\n  --calcite-animation-timing: calc(150ms * var(--calcite-internal-duration-factor));\n  --calcite-internal-duration-factor: var(--calcite-duration-factor, 1);\n  --calcite-internal-animation-timing-fast: calc(100ms * var(--calcite-internal-duration-factor));\n  --calcite-internal-animation-timing-medium: calc(200ms * var(--calcite-internal-duration-factor));\n  --calcite-internal-animation-timing-slow: calc(300ms * var(--calcite-internal-duration-factor));\n}\n\n.calcite-animate {\n  opacity: 0;\n  animation-fill-mode: both;\n  animation-duration: var(--calcite-animation-timing);\n}\n\n.calcite-animate__in {\n  animation-name: in;\n}\n\n.calcite-animate__in-down {\n  animation-name: in-down;\n}\n\n.calcite-animate__in-up {\n  animation-name: in-up;\n}\n\n.calcite-animate__in-scale {\n  animation-name: in-scale;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --calcite-internal-duration-factor: 0.01;\n  }\n}\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host {\n  /* Base \":host\" styles for the component */\n  box-sizing: border-box;\n  background-color: var(--calcite-ui-foreground-1);\n  color: var(--calcite-ui-text-2);\n  font-size: var(--calcite-font-size--1);\n}\n:host * {\n  box-sizing: border-box;\n}\n\n:root {\n  --calcite-floating-ui-transition: var(--calcite-animation-timing);\n  --calcite-floating-ui-z-index: 600;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n/**\n* CSS Custom Properties\n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-action-group-columns: Sets number of grid-template-columns when the `layout` property is `\"grid\"`.\n*/\n:host {\n  display: flex;\n  flex-direction: column;\n  padding: 0px;\n  --calcite-action-group-columns: 3;\n}\n\n:host([columns=\"1\"]) {\n  --calcite-action-group-columns: 1;\n}\n\n:host([columns=\"2\"]) {\n  --calcite-action-group-columns: 2;\n}\n\n:host([columns=\"3\"]) {\n  --calcite-action-group-columns: 3;\n}\n\n:host([columns=\"4\"]) {\n  --calcite-action-group-columns: 4;\n}\n\n:host([columns=\"5\"]) {\n  --calcite-action-group-columns: 5;\n}\n\n:host([columns=\"6\"]) {\n  --calcite-action-group-columns: 6;\n}\n\n:host(:first-child) {\n  padding-block-start: 0px;\n}\n\n:host([layout=horizontal]) {\n  flex-direction: row;\n}\n\n:host([layout=grid]) {\n  display: grid;\n  place-content: stretch;\n  gap: 1px;\n  background-color: var(--calcite-ui-background);\n  padding: 1px;\n  grid-template-columns: repeat(var(--calcite-action-group-columns), auto);\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { Fragment, h } from \"@stencil/core\";\nimport { connectConditionalSlotComponent, disconnectConditionalSlotComponent } from \"../../utils/conditionalSlot\";\nimport { getSlotted } from \"../../utils/dom\";\nimport { componentLoaded, setComponentLoaded, setUpLoadableComponent } from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized } from \"../../utils/locale\";\nimport { connectMessages, disconnectMessages, setUpMessages, updateMessages } from \"../../utils/t9n\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { ICONS, SLOTS } from \"./resources\";\n/**\n * @slot - A slot for adding a group of `calcite-action`s.\n * @slot menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`.\n * @slot menu-tooltip - A slot for adding a `calcite-tooltip` for the menu.\n */\nexport class ActionGroup {\n  constructor() {\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.setMenuOpen = (event) => {\n      this.menuOpen = !!event.target.open;\n    };\n    this.expanded = false;\n    this.layout = \"vertical\";\n    this.columns = undefined;\n    this.menuOpen = false;\n    this.scale = undefined;\n    this.messages = undefined;\n    this.messageOverrides = undefined;\n    this.effectiveLocale = \"\";\n    this.defaultMessages = undefined;\n  }\n  expandedHandler() {\n    this.menuOpen = false;\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  effectiveLocaleChange() {\n    updateMessages(this, this.effectiveLocale);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n  /** Sets focus on the component's first focusable element. */\n  async setFocus() {\n    await componentLoaded(this);\n    this.el.focus();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n  connectedCallback() {\n    connectLocalized(this);\n    connectMessages(this);\n    connectConditionalSlotComponent(this);\n  }\n  disconnectedCallback() {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n  async componentWillLoad() {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n  componentDidLoad() {\n    setComponentLoaded(this);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n  renderTooltip() {\n    const { el } = this;\n    const hasTooltip = getSlotted(el, SLOTS.menuTooltip);\n    return hasTooltip ? h(\"slot\", { name: SLOTS.menuTooltip, slot: ACTION_MENU_SLOTS.tooltip }) : null;\n  }\n  renderMenu() {\n    const { el, expanded, menuOpen, scale, layout, messages } = this;\n    const hasMenuItems = getSlotted(el, SLOTS.menuActions);\n    return hasMenuItems ? (h(\"calcite-action-menu\", { expanded: expanded, flipPlacements: [\"left\", \"right\"], label: messages.more, onCalciteActionMenuOpen: this.setMenuOpen, open: menuOpen, placement: layout === \"horizontal\" ? \"bottom-start\" : \"leading-start\", scale: scale }, h(\"calcite-action\", { icon: ICONS.menu, scale: scale, slot: ACTION_MENU_SLOTS.trigger, text: messages.more, textEnabled: expanded }), h(\"slot\", { name: SLOTS.menuActions }), this.renderTooltip())) : null;\n  }\n  render() {\n    return (h(Fragment, null, h(\"slot\", null), this.renderMenu()));\n  }\n  static get is() { return \"calcite-action-group\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get delegatesFocus() { return true; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"action-group.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"action-group.css\"]\n    };\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  static get properties() {\n    return {\n      \"expanded\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"When `true`, the component is expanded.\"\n        },\n        \"attribute\": \"expanded\",\n        \"reflect\": true,\n        \"defaultValue\": \"false\"\n      },\n      \"layout\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Layout\",\n          \"resolved\": \"\\\"grid\\\" | \\\"horizontal\\\" | \\\"vertical\\\"\",\n          \"references\": {\n            \"Layout\": {\n              \"location\": \"import\",\n              \"path\": \"../interfaces\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates the layout of the component.\"\n        },\n        \"attribute\": \"layout\",\n        \"reflect\": true,\n        \"defaultValue\": \"\\\"vertical\\\"\"\n      },\n      \"columns\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Columns\",\n          \"resolved\": \"1 | 2 | 3 | 4 | 5 | 6\",\n          \"references\": {\n            \"Columns\": {\n              \"location\": \"import\",\n              \"path\": \"../interfaces\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates number of columns.\"\n        },\n        \"attribute\": \"columns\",\n        \"reflect\": true\n      },\n      \"menuOpen\": {\n        \"type\": \"boolean\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"When `true`, the `calcite-action-menu` is open.\"\n        },\n        \"attribute\": \"menu-open\",\n        \"reflect\": true,\n        \"defaultValue\": \"false\"\n      },\n      \"scale\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Scale\",\n          \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n          \"references\": {\n            \"Scale\": {\n              \"location\": \"import\",\n              \"path\": \"../interfaces\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Specifies the size of the `calcite-action-menu`.\"\n        },\n        \"attribute\": \"scale\",\n        \"reflect\": true\n      },\n      \"messages\": {\n        \"type\": \"unknown\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"ActionGroupMessages\",\n          \"resolved\": \"{ more: string; }\",\n          \"references\": {\n            \"ActionGroupMessages\": {\n              \"location\": \"import\",\n              \"path\": \"./assets/action-group/t9n\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Made into a prop for testing purposes only\"\n        }\n      },\n      \"messageOverrides\": {\n        \"type\": \"unknown\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"Partial<ActionGroupMessages>\",\n          \"resolved\": \"{ more?: string; }\",\n          \"references\": {\n            \"Partial\": {\n              \"location\": \"global\"\n            },\n            \"ActionGroupMessages\": {\n              \"location\": \"import\",\n              \"path\": \"./assets/action-group/t9n\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Use this property to override individual strings used by the component.\"\n        }\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"effectiveLocale\": {},\n      \"defaultMessages\": {}\n    };\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets focus on the component's first focusable element.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"expanded\",\n        \"methodName\": \"expandedHandler\"\n      }, {\n        \"propName\": \"messageOverrides\",\n        \"methodName\": \"onMessagesChange\"\n      }, {\n        \"propName\": \"effectiveLocale\",\n        \"methodName\": \"effectiveLocaleChange\"\n      }];\n  }\n}\n"]}