{"file":"utils-a2b4c9c1.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,gBAAgB,GAAG,EAAE,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,YAAY,GAAG,EAAE,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,aAAa,CAAC,IAAI,EAAE;AAC1C,EAAE,MAAM,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAC1C,EAAE,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAAE;AAChC,IAAI,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;AACpC,GAAG;AACH,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;AAC7B,IAAI,YAAY,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,yBAAyB,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACzF,OAAO,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC;AAClC,OAAO,KAAK,CAAC,MAAM;AACnB,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,kBAAkB,EAAE,MAAM,CAAC,+CAA+C,CAAC,CAAC,CAAC;AAClG,MAAM,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC;AACjC,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;AAC1C,EAAE,gBAAgB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AAClC,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACO,SAAS,mBAAmB,CAAC,KAAK,EAAE;AAC3C,EAAE,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,WAAW,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9D;;;;","names":[],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/date-picker/utils.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { getAssetPath } from \"@stencil/core\";\nimport { dateFromISO } from \"../../utils/date\";\nimport { getSupportedLocale } from \"../../utils/locale\";\n/**\n * CLDR cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const translationCache = {};\n/**\n * CLDR request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache = {};\n/**\n * Fetch calendar data for a given locale from list of supported languages\n *\n * @param lang\n * @public\n */\nexport async function getLocaleData(lang) {\n  const locale = getSupportedLocale(lang);\n  if (translationCache[locale]) {\n    return translationCache[locale];\n  }\n  if (!requestCache[locale]) {\n    requestCache[locale] = fetch(getAssetPath(`./assets/date-picker/nls/${locale}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n      console.error(`Translations for \"${locale}\" not found or invalid, falling back to english`);\n      return getLocaleData(\"en\");\n    });\n  }\n  const data = await requestCache[locale];\n  translationCache[locale] = data;\n  return data;\n}\n/**\n *  Maps value to valueAsDate\n *\n * @param value\n */\nexport function getValueAsDateRange(value) {\n  return value.map((v, index) => dateFromISO(v, index === 1));\n}\n"],"version":3}