{"file":"t9n-df6ee4f9.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AAGO,MAAM,iCAAiC,GAAG,EAAE,CAAC;AACpD,eAAe,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE;AACjD,EAAE,MAAM,GAAG,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AACrC,EAAE,IAAI,iCAAiC,CAAC,GAAG,CAAC,EAAE;AAC9C,IAAI,OAAO,iCAAiC,CAAC,GAAG,CAAC,CAAC;AAClD,GAAG;AACH,EAAE,iCAAiC,CAAC,GAAG,CAAC,GAAG,KAAK,CAACA,kBAAY,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACjH,KAAK,IAAI,CAAC,CAAC,IAAI,KAAK;AACpB,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;AAClB,MAAM,sBAAsB,EAAE,CAAC;AAC/B,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;AACvB,GAAG,CAAC;AACJ,KAAK,KAAK,CAAC,MAAM,sBAAsB,EAAE,CAAC,CAAC;AAC3C,EAAE,OAAO,iCAAiC,CAAC,GAAG,CAAC,CAAC;AAChD,CAAC;AACD,SAAS,sBAAsB,GAAG;AAClC,EAAE,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;AAC9D,CAAC;AACD,SAAS,aAAa,CAAC,SAAS,EAAE;AAClC,EAAE,SAAS,CAAC,QAAQ,GAAG;AACvB,IAAI,GAAG,SAAS,CAAC,eAAe;AAChC,IAAI,GAAG,SAAS,CAAC,gBAAgB;AACjC,GAAG,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACO,eAAe,aAAa,CAAC,SAAS,EAAE;AAC/C,EAAE,SAAS,CAAC,eAAe,GAAG,MAAM,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;AACxF,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AACD,eAAe,aAAa,CAAC,SAAS,EAAE,IAAI,EAAE;AAC9C,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,SAAS,CAAC;AAC3B,EAAE,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;AACvC,EAAE,MAAM,aAAa,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;AACpD,EAAE,OAAO,gBAAgB,CAACC,yBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,aAAa,CAAC,CAAC;AAC1E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE;AACtD,EAAE,SAAS,CAAC,eAAe,GAAG,MAAM,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACnE,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,eAAe,CAAC,SAAS,EAAE;AAC3C,EAAE,SAAS,CAAC,gBAAgB,GAAG,uBAAuB,CAAC;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,kBAAkB,CAAC,SAAS,EAAE;AAC9C,EAAE,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC;AACzC,CAAC;AACD,SAAS,uBAAuB,GAAG;AACnC,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;AACtB;;;;;;;","names":["getAssetPath","getSupportedLocale"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/t9n.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale } from \"./locale\";\nexport const componentLangToMessageBundleCache = {};\nasync function getMessageBundle(lang, component) {\n  const key = `${component}_${lang}`;\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n    if (!resp.ok) {\n      throwMessageFetchError();\n    }\n    return resp.json();\n  })\n    .catch(() => throwMessageFetchError());\n  return componentLangToMessageBundleCache[key];\n}\nfunction throwMessageFetchError() {\n  throw new Error(\"could not fetch component message bundle\");\n}\nfunction mergeMessages(component) {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides\n  };\n}\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component) {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\nasync function fetchMessages(component, lang) {\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component, lang) {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component) {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component) {\n  component.onMessagesChange = undefined;\n}\nfunction defaultOnMessagesChange() {\n  mergeMessages(this);\n}\n"],"version":3}